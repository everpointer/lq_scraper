// Generated by CoffeeScript 1.3.3
(function() {
  var configs, configs_buf, fetch_dp_comments, fetch_taobao_comments, filter_taobao_item, fs, jsdom, parse_dp_review_li, request;

  fs = require("fs");

  jsdom = require("jsdom");

  request = require("request");

  configs_buf = fs.readFileSync(__dirname + "/config/api.json");

  configs = JSON.parse(configs_buf);

  fetch_taobao_comments = function(operator_id, product_id, page, callback) {
    var review_result, tb_confs;
    if (page == null) {
      page = 1;
    }
    tb_confs = configs.comment.taobao;
    review_result = {
      info: {
        "current_page": page,
        "page_size": tb_confs.page_size
      },
      scoreInfo: {},
      rateListInfo: {},
      data: []
    };
    return request({
      url: tb_confs.fetch_url + "&userNumId=" + operator_id + "&auctionNumId=" + product_id + "&currentPage=" + page,
      headers: {
        "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; zh-CN; rv:1.9.1.2) Gecko/20090803 Fedora/3.5.2-2.fc11 Firefox/3.5.2"
      },
      encoding: "gbk"
    }, function(error, response, body) {
      var filePath, index, item, reviews, _i, _len, _ref;
      if (!error && response.statusCode === 200) {
        index = body.indexOf("{");
        reviews = JSON.parse(body.substr(index));
        if (reviews && typeof reviews !== void 0) {
          review_result.scoreInfo = reviews.scoreInfo;
          review_result.paginator = reviews.rateListInfo.paginator;
          _ref = reviews.rateListInfo.rateList;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            item = filter_taobao_item(item);
            review_result.data.push(item);
          }
        }
        filePath = "websites/taobao_reviews_" + product_id + ".json";
        fs.writeFile(filePath, JSON.stringify(review_result));
        return callback(null, review_result);
      } else {
        return callback(error);
      }
    });
  };

  filter_taobao_item = function(item) {
    var new_item;
    new_item = {
      rateId: item.id,
      nick: item.displayUserNick,
      userId: item.displayUserNumId,
      content: item.rateContent,
      date: item.rateDate,
      userVipLevel: item.userVipLevel,
      userLink: item.displayUserLink,
      userCreditImg: "http://pics.taobaocdn.com/newrank/" + item.displayRatePic
    };
    return new_item;
  };

  fetch_dp_comments = function(shop_id, page, callback) {
    var reviews;
    if (page == null) {
      page = 1;
    }
    reviews = {
      info: {
        "current_page": page,
        "page_size": configs.comment.dianping.page_size
      },
      data: []
    };
    return request({
      url: configs.comment.dianping.fetch_url + shop_id + "/review_all?pageno=" + page,
      headers: {
        "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; zh-CN; rv:1.9.1.2) Gecko/20090803 Fedora/3.5.2-2.fc11 Firefox/3.5.2"
      }
    }, function(error, response, body) {
      var document, filepath, review, review_li, reviews_ul, xPathResult, _i, _len, _ref;
      if (!error && response.statusCode === 200) {
        document = jsdom.jsdom(body);
        xPathResult = document.evaluate('//*[@id="top"]/div[4]/div[1]/div/div/ul[2]/ul', document, null, 4, null);
        reviews_ul = xPathResult.iterateNext();
        _ref = reviews_ul.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          review_li = _ref[_i];
          review = parse_dp_review_li(review_li);
          reviews.data.push(review);
        }
        filepath = "websites/dianping_reviews_" + shop_id + ".json";
        fs.writeFile(filepath, JSON.stringify(reviews));
        return callback(null, reviews);
      } else {
        return callback(error);
      }
    });
  };

  parse_dp_review_li = function(review_li) {
    var $, comment_entry, comment_misc, comment_other, comment_rst, comment_star_class, comment_star_span, review_jq, review_result, star_prefix, user_info;
    $ = require('jQuery');
    review_result = {};
    review_jq = $(review_li);
    review_result.review_id = parseInt(review_jq.attr("id").substring(4));
    user_info = $(review_li).find(".user-info");
    review_result.user_name = $(user_info).children("a").html();
    review_result.user_id = $(user_info).children("a").attr("user-id");
    comment_rst = $(review_li).find(".comment-rst");
    review_result.avatar = $(review_li).find("a.avatar img").attr("src");
    comment_star_span = $(comment_rst).children("span");
    if (typeof comment_star_span === 'undefined' || comment_star_span.length < 1) {
      review_result.comment_star = "none";
    } else {
      comment_star_class = $(comment_star_span).attr("class");
      star_prefix = "irr-star";
      review_result.comment_star = parseInt(comment_star_class.substring(comment_star_class.indexOf(star_prefix) + star_prefix.length)) / 10;
    }
    comment_other = comment_rst.children("dl");
    review_result.flavour = comment_other.children("dd:nth-child(2)").text();
    review_result.environment = comment_other.children("dd:nth-child(4)").text();
    review_result.service = comment_other.children("dd:nth-child(6)").text();
    if (comment_other.children("dd:nth-child(4)") && typeof comment_other.children("dd:nth-child(8)") !== void 0) {
      review_result.average = comment_other.children("dd:nth-child(8)").text();
    }
    comment_entry = $(review_li).find(".comment-entry");
    if ($(comment_entry).children("div.comment-type").length > 0) {
      review_result.comment_type = $(comment_entry).children("div.comment-type").children("span").text();
    }
    review_result.comment_content = $(comment_entry).children("div[id$='summary']").html();
    comment_misc = $(review_li).find(".misc");
    review_result.comment_time = $(comment_misc).children("span.time").html();
    return review_result;
  };

  exports.fetch_comments = function(operator_id, fetch_id, platform, page, callback) {
    if (page == null) {
      page = 1;
    }
    console.log(fetch_id + platform);
    switch (platform) {
      case "taobao":
        return fetch_taobao_comments(operator_id, fetch_id, page, callback);
      case "dianping":
        return fetch_dp_comments(fetch_id, page, callback);
      default:
        return console.log("unknown platform:" + platform);
    }
  };

}).call(this);
